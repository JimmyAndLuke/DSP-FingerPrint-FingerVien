/******************************************************************************
 * 文件名：image_enhance_filter.h
 * 功能：  一些基本的图像增强和滤波操作
******************************************************************************/

#if !defined __IMAGE_ENHANCE_FILTER_H
#define __IMAGE_ENHANCE_FILTER_H

//#include "image.h"
//#include "float_field.h"
#include "../../bsp/bsp_header/z_mytype.h"
#include "../../sys/sys_header/sys_global.h"

#ifdef __cplusplus
extern "C" {
#endif


/******************************************************************************
  * 功能：图像数据软化(平滑)操作，通过计算均值实现
  * 参数：pDst      平滑(软化)后数据
  *		  pSrc		软化(平滑)前数据
  *		  width		数据宽度
  *		  height	数据高度
  *		  pitch		每行字节数
  *       size      软化(平滑)窗口大小(2*r+1)
  *		  step		软化(平滑)步长
  * 返回：
******************************************************************************/
void MeanSmooth
(
 uint8_t *pDst, 
 uint8_t *pSrc, 
 const int32_t width,
 const int32_t height,
 const int32_t pitch,
 const int32_t size, 
 const int32_t step
 );

/******************************************************************************
  * 功能：图像数据软化(平滑)操作，通过计算均值实现
  * 参数：pDst      平滑(软化)后数据
  *		  pSrc		软化(平滑)前数据
  *		  width		数据宽度
  *		  height	数据高度
  *		  pitch		每行字节数
  *       size      软化(平滑)窗口大小(2*r+1)
  *		  step		软化(平滑)步长
  * 返回：
******************************************************************************/
void MeanSmoothV1
(
 uint8_t *pDst, 
 uint8_t *pSrc, 
 const int32_t width,
 const int32_t height,
 const int32_t pitch,
 const int32_t size, 
 const int32_t step
 );


/******************************************************************************
*******************************************************************************
************************下面的函数对指纹具有较强的适用性***********************
************************下面的函数对指纹具有较强的适用性***********************
************************下面的函数对指纹具有较强的适用性***********************
*******************************************************************************
******************************************************************************/

extern int g_direction_xy[12][7][2];

/******************************************************************************
  * 功能：由角度算出方向,得到的作为方向分块数组(g_direction_xy)的索引,被调用
  * 参数：angle		某点的纹线方向角度(0-180)
  * 返回：方向
  * 说明: 
******************************************************************************/
int32_t AngleToDirection(int32_t angle);


/******************************************************************************
  * 功能：图像数据的方向增强(有Gabor小波增强算法改善运算速度演变而来)
  * 参数：pSrc				欲增强图像的数据指针	
  *		  pOrient			方向场数据指针(调用GetOrientation获得)
  *		  width				图像宽度
  *		  height			图像高度
  *		  pitch				图像每行字节数
  * 返回：错误编号
  * 说明: 1.利用方向场计算函数计算得到图像每点(x,y)的方向场
  *		  2.然后调用方向增强函数(方向图增强或小波增强)对图像进行方向增强,
  *		  3.最终得到方向增强后的图像.
  *		  基于指纹图像场场论和Gabor小波两个工具,解决了图像的智能增强问题.
  *			利用指纹图像场场论可以获得"方向场"和"频率场"
  *			利用Gabor小波函数,可以在该位置方向场上对图像进行增强,以弥补图像中
  *			纹线的断裂等不足.
  * 算法: 
  *		  1.获得方向场数据.函数的参数pOrient即为方向场数据,因此要确保先计算
  *		    得到pOrient(调用GetOrientation获得)
  *		  2.由pOrient数据得到每点的纹线角度,并调用AngleToDirection函数获得纹线
  *		    方向
  *		  3.由纹线方向对g_direction_xy数组索引表进行索引,获得对应方向上点的坐标
  *		  4.分别利用平滑滤波器Hw和Vw对纹线水平方向进行平滑滤波,垂直方向进行锐化
  *			滤波.
  *	总结: 对每一点进行Gabor函数运算,即可实现智能增强的效果.如:
  *		  fp_enhance_algo.c里的ImageEnhanceGabor等函数.
  *       加速算法(模版大小固定7x7):
  *			  (1)为了加快速度,将Gabor函数制成模版,用模版来拟合Gabor函数,如:
  *		         这里的OrientEnhance函数.
  *			  (2)又因为Gabor函数模版运算也很耗时,故将矩形模版变为两条相交的
  *			     线段性模版,这样作模版运算,运算量就小很多.
  *			  (3)化简后得到的切向滤波模版是:		Hw=1/7( 1, 1,1,1,1, 1, 1)
  *							 法向滤波(锐化)模版是	Vw=1/7(-3,-1,3,9,3,-1,-3)
  *	P.S.: 函数OrientBinary的实现与之类似
******************************************************************************/
void OrientEnhance
(
 uint8_t *pSrc, 
 uint8_t *pOrientation, 
 const int32_t width, 
 const int32_t height,
 const int32_t pitch 
);

















#ifdef __cplusplus
}
#endif /* extern "C" */

#endif /* __IMAGE_ENHANCE_FILTER_H */

